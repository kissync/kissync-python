import os, platform, sys, time, urllib2
from smartfile import OAuthClient
from PyQt4 import QtCore, QtGui, QtWebKit, QtSvg

class KissyncStyle(object):
	BLACK = "#000000"
	WHITE = "#FFFFFF"
	BLUE = "#1BA1E2"
	BROWN = "#A05000"
	GREEN = "#339933"
	LIME = "#8CBF26"
	MAGENTA = "#FF0097"
	ORANGE = "#F09609"
	PINK = "#E671B8"
	PURPLE = "#A200FF"
	RED = "#E51400"
	TEAL = "#00ABA9"
	
	SQUAREOPACITY = .66
	
	def hexToQColor(self, value):
		value = value.strip('#')
		return QtGui.QColor(int(value[:2], 16), int(value[2:4], 16), int(value[4:], 16), 255)

class FlowLayout(QtGui.QLayout):
    def __init__(self, parent=None, margin=0, spacing=-1):
        super(FlowLayout, self).__init__(parent)
        if parent is not None:
            self.setMargin(margin)
        self.setSpacing(spacing)
        self.itemList = []

    def __del__(self):
        item = self.takeAt(0)
        while item:
            item = self.takeAt(0)

    def addItem(self, item):
        self.itemList.append(item)

    def count(self):
        return len(self.itemList)

    def itemAt(self, index):
        if index >= 0 and index < len(self.itemList):
            return self.itemList[index]

        return None

    def takeAt(self, index):
        if index >= 0 and index < len(self.itemList):
            return self.itemList.pop(index)

        return None

    def expandingDirections(self):
        return QtCore.Qt.Orientations(QtCore.Qt.Orientation(0))

    def hasHeightForWidth(self):
        return True

    def heightForWidth(self, width):
        height = self.doLayout(QtCore.QRect(0, 0, width, 0), True)
        return height

    def setGeometry(self, rect):
        super(FlowLayout, self).setGeometry(rect)
        self.doLayout(rect, False)

    def sizeHint(self):
        return self.minimumSize()

    def minimumSize(self):
        size = QtCore.QSize()

        for item in self.itemList:
            size = size.expandedTo(item.minimumSize())

        size += QtCore.QSize(2 * self.margin(), 2 * self.margin())
        return size

    def doLayout(self, rect, testOnly):
        x = rect.x()
        y = rect.y()
        lineHeight = 0

        for item in self.itemList:
            wid = item.widget()
            spaceX = self.spacing() + wid.style().layoutSpacing(QtGui.QSizePolicy.PushButton, QtGui.QSizePolicy.PushButton, QtCore.Qt.Horizontal)
            spaceY = self.spacing() + wid.style().layoutSpacing(QtGui.QSizePolicy.PushButton, QtGui.QSizePolicy.PushButton, QtCore.Qt.Vertical)
            nextX = x + item.sizeHint().width() + spaceX
            if nextX - spaceX > rect.right() and lineHeight > 0:
                x = rect.x()
                y = y + lineHeight + spaceY
                nextX = x + item.sizeHint().width() + spaceX
                lineHeight = 0

            if not testOnly:
                item.setGeometry(QtCore.QRect(QtCore.QPoint(x, y), item.sizeHint()))

            x = nextX
            lineHeight = max(lineHeight, item.sizeHint().height())

        return y + lineHeight - rect.y()


class SquareObject(QtGui.QWidget):
    
	def __init__(self, parent, color = None):
		QtGui.QWidget.__init__(self)
		self.parent = parent
		
		self.squareWidth = 180
		self.squareHeight = 90
		
		self.initUI()
		
		self.icon = QtGui.QImage()
		self.icon.load(os.path.dirname(os.path.realpath(__file__)) + "/icons/faience/mimetypes/text-x-python.svg")
		self.icontarget = QtCore.QRectF(0, 0, 64, 64)
		
		self.closebutton = QtGui.QImage()
		self.closebutton.load(os.path.dirname(os.path.realpath(__file__)) + "/icons/bwpx-icns/icons/symbol_multiplication.gif")
		self.closebuttontarget = QtCore.QRectF((self.squareWidth - 18), 0, 18, 18)
		
		if(color == None):
			self.color = parent.style.BLUE
		else:
			self.color = color
		self.color = parent.style.hexToQColor(self.color)
        
	def initUI(self):      
		print "Creating a square..."
		self.setFixedSize(self.squareWidth, self.squareHeight)
		self.opacity = 0.0
		
		self.timeline = QtCore.QTimeLine()
		self.timeline.valueChanged.connect(self.animate)
		self.timeline.setDuration(500)
		self.timeline.start()
		self.show()

	#this is called every time something needs to be repainted
	def paintEvent(self, e):
		painter = QtGui.QPainter()
		painter.begin(self)
		painter.setOpacity(self.opacity)
		self.drawSquare(painter)
		painter.drawImage(self.icontarget, self.icon)
		painter.drawImage(self.closebuttontarget, self.closebutton)
		painter.end()
        
	def drawSquare(self, painter):
		#get rid of the pen... gets rid of outline on drawing
		painter.setPen(QtCore.Qt.NoPen)
		#windows 8 colors are pretty http://www.creepyed.com/2012/09/windows-8-colors-hex-code/
		painter.setBrush(self.color)
		#from docs: drawRect (self, int x, int y, int w, int h)
		painter.drawRect(0, 0, self.squareWidth, self.squareHeight)
	
	def animate(self, value):
		self.opacity = value * self.parent.style.SQUAREOPACITY
		self.repaint()
		
	def enterEvent(self,event): 
		print("Enter") 
		self.opacity = 1.0
		self.repaint()
	
	def leaveEvent(self,event): 
		print("Leave") 
		self.opacity = self.parent.style.SQUAREOPACITY
		self.repaint()
	
	def mousePressEvent(self,event): 
		print("Widget clicked event") 
		self.repaint()
	
	
class FileView(QtGui.QWidget):
	def __init__(self):
		QtGui.QWidget.__init__(self)

		##get rid of the widget border
		#self.setStyleSheet("border: 0px")
		self.style = KissyncStyle()
		
		topText = QtGui.QLabel('Kissync File View Widget Test')
		 
		self.addButton = QtGui.QPushButton('button to add other widgets')
		self.addButton.clicked.connect(self.addWidget)
		
		# flow layout, which will be inside the scroll area called scrollArea
		self.flowLayout = FlowLayout(None, 10)

		# make a widget called
		self.scrollWidget = QtGui.QWidget()
		self.scrollWidget.setLayout(self.flowLayout)
		#set the borders around the scroll widget
		self.scrollWidget.setContentsMargins(10, 10, 10, 10)

		# scroll area
		self.scrollArea = QtGui.QScrollArea()
		self.scrollArea.setWidgetResizable(True)
		self.scrollArea.setWidget(self.scrollWidget)

		# main layout
		self.mainLayout = QtGui.QVBoxLayout()

		# add all main to the main vLayout
		self.mainLayout.addWidget(self.addButton)
		self.mainLayout.addWidget(self.scrollArea)
		
		self.setLayout(self.mainLayout)

	def addWidget(self):
		self.flowLayout.addWidget(SquareObject(self, self.style.PINK))
		self.flowLayout.addWidget(SquareObject(self, self.style.PURPLE))
		self.flowLayout.addWidget(SquareObject(self, self.style.TEAL))
		self.flowLayout.addWidget(SquareObject(self, self.style.BLUE))
		self.flowLayout.addWidget(SquareObject(self, self.style.LIME))
		self.flowLayout.addWidget(SquareObject(self, self.style.ORANGE))
		self.flowLayout.addWidget(SquareObject(self, self.style.RED))


		

	

class MainWindow(QtGui.QWidget):
	def __init__(self, parent = None):
		super(MainWindow, self).__init__(parent)
		self.setWindowTitle('Keep It Simple Sync')  
		
		self.displayFont = QtGui.QFont()
		#self.setStyleSheet("#MainWindow {background-color: #222222; }") 
		self.setGeometry(400, 200, 1000, 500)
		
		fontDatabase = QtGui.QFontDatabase()
		#fontfile = QtCore.QFile("resources/Roboto-Light-webfont.ttf")
		fontDatabase.addApplicationFont(os.path.dirname(os.path.realpath(__file__)) + "/resources/Roboto-Light-webfont.ttf")
		os.path.dirname(os.path.realpath(__file__)) + "/resources/Roboto-Light-webfont.ttf"
		palette = QtGui.QPalette()
		#palette.setColor(QtGui.QPalette.Foreground,QtGui.QColor("#FFFFFF"))
		
		topText = QtGui.QLabel('kisSync')
		#http://pyqt.sourceforge.net/Docs/PyQt4/qfont.html#Weight-enum
		font = QtGui.QFont("Roboto", 32, QtGui.QFont.Light, False)
		topText.setFont(font)
		topText.setPalette(palette)
		#topText.setStyleSheet("color: #FFFFFF;")

		fileview = FileView()	
		
		grid = QtGui.QGridLayout()
		#grid.setContentsMargins(0, 0, 0, 0)
		grid.addWidget(topText)
		grid.addWidget(fileview)

		self.setLayout(grid)

if __name__ == "__main__":
	
	app = QtGui.QApplication(sys.argv)
	mainwindow = MainWindow()
	mainwindow.show()
	sys.exit(app.exec_())
	gtk.main()


if __name__ == '__main__':
    main()
